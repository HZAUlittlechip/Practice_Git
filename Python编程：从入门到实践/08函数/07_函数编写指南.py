# 应给函数指定描述性名称，且只使⽤ ⼩写字⺟和下划线

# 每个函数都应包含简要阐述其功能的注释。

# 在给形参指定默认值时，等号两边不要有空格

# 小结：
# 在本章中，你⾸先学习了如何编写函数，以及如何传递实参，让函数能够
# 访问完成⼯作所需的信息。然后学习了如何使⽤位置实参和关键字实参，
# 以及如何接受任意数量的实参。你⻅识了显⽰输出的函数和返回值的函
# 数，知道了如何将函数与列表、字典、if 语句和 while 循环结合起来使
# ⽤，以及如何将函数存储在称为模块的独⽴⽂件中，让程序⽂件更简单、
# 更易于理解。最后，你了解了函数编写指南，遵循这些指南可让程序始终
# 保持良好的结构，对你和其他⼈来说都易于阅读。
# 程序员的⽬标之⼀是编写简单的代码来完成任务，⽽函数有助于实现这样
# 的⽬标。使⽤它们，你在编写好⼀个个代码块并确定其能够正确运⾏后，
# 就可不必在上⾯花更多精⼒。确定函数能够正确地完成⼯作后，你就可以
# 接着投⾝于下⼀个编程任务，因为你知道它们以后也不会出问题。
# 函数让你在编写⼀次代码后，可以复⽤它们任意多次。当需要运⾏函数中
# 的代码时，只需编写⼀⾏函数调⽤代码，就能让函数完成其⼯作。当需要
# 修改函数的⾏为时，只需修改⼀个代码块，你所做的修改就将影响调⽤这
# 个函数的每个地⽅。
# 使⽤函数让程序更容易阅读，⽽良好的函数名概述了程序各个部分的作
# ⽤。相⽐于阅读⼀系列代码块，阅读⼀系列函数调⽤让你能够更快地明⽩
# 程序的作⽤。
# 函数还让代码更容易测试和调试。如果程序使⽤⼀系列函数来完成任务，
# 其中的每个函数都完成⼀项具体⼯作，那么程序测试和维护起来将容易得
# 多：可编写分别调⽤每个函数的程序，并测试每个函数是否在可能的各种
# 情形下都能正确地运⾏。经过这样的测试，你就能深信每次调⽤这些函数
# 时，它们都将正确地运⾏。